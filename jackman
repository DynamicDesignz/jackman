#!/bin/bash

export TEXTDOMAINDIR=/usr/share/locale
export TEXTDOMAIN=jackman

. /usr/bin/gettext.sh

OPTIND=1         # Reset in case getopts has been used previously in the shell.

# Initialize our own variables:
verbose=0

configfile=".config/jackman.conf"

jackuser=$(ps -p `pidof jackdbus | cut -d ' ' -f1` -o user=)
[[ -z $jackuser ]] && [[ ! $USER = "root" ]] && jackuser=$USER
[[ -z $jackuser ]] && jackuser=$(/usr/bin/users | cut -d ' ' -f 1)
jackhome=$(eval /usr/bin/echo ~$jackuser)

DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/$(id -u $jackuser)/bus"

function die { echo "$@" 1>&2 ; exit 1; }

function show_help {
    /usr/bin/echo "`eval_gettext \"this script configures the audio device given by environment variables \\$DEVNAME and \\$ID_MODEL (see udev parameter description) or the device with highest priority as jackdbus master if it has a higher priority than the current master (as specified in \\$HOME/\\\${configfile}), starts jackdbus and adds alsa_in and alsa_out devices for all other audio devices.

parameters:
    -h show this
    -v verbose output
    -m set value for ID_MODEL
    -n set value for DEVNAME
    -f force replace (see FORCEREPLACE in next section)
    -d set value for DEVICE
    -b set value for BLACKLIST, e.g. \\\"HDA Intel MID,3\\\"
    -k use previously used card and refresh jackbus, alsa_in, alsa_out
    
environment variables used by this script:
    ID_MODEL: model id of the device as given by udev
    DEVNAME: device name as given by udev
    FORCEREPLACE: if not empty the current master will always be replaced, regardless of its priority
    DEVICE: if set to an integer number, the device of the given card with id \\$DEVICE will be used, regardless of its priority
    BLACKLIST: dont use devices with name in semicolon separated list \\$BLACKLIST
    
parameters used for jack_control can be specified in \\$HOME/\\\${configfile}

common issues:
    if ulimit is too low (errors like \\"cannot lock down memory\\" appear) place the following line in /etc/pam.d/su:
        session         required        pam_limits.so
\"`"
}


function add_inout {
    cardlines=$(LANG= /usr/bin/aplay -l | grep card | grep device)
    printf '%s\n' "$cardlines" | while IFS= read -r cardline; do
        card=$(grep -o -P '(?<=card )[0-9]*' <<< "$cardline")
        device=$(grep -o -P '(?<=device )[0-9]*' <<< "$cardline")
        name=$(grep -o -P '(?<=\[)[^\[\]]*(?=\])' <<< "$cardline" | head -1)
        card=${card// /}
        device=${device// /}
        name="${name},${device}"
        [[ -z $card ]] && continue
        [[ $BLACKLIST =~ (^|;)"$name"($|;) ]] && continue
        #[[ verbose -gt 0 ]] && /usr/bin/echo "$cardline"
        [[ verbose -gt 0 ]] && /usr/bin/echo "`eval_gettext \"Attaching hw:\\\${card},\\\${device}.\"`"
        /usr/bin/nohup /usr/bin/alsa_out -d "hw:${card},${device}" -j "${name} - out" & disown
        /usr/bin/nohup /usr/bin/alsa_in -d "hw:${card},${device}" -j "${name} - in" & disown
    done
    
    /usr/bin/jack_lsp | grep -i pulseaudio >/dev/null 2>/dev/null || (/usr/bin/pulseaudio -k && [[ verbose -gt 0 ]] && /usr/bin/echo "$(gettext "restarting pulseaudio")") &
}

function jack_apply_config {
    [[ ! -z $keep ]] && return
    IFS=';' read -ra configs <<< "$confline"		
    for i in "${configs[@]}"; do
        IFS='=' read -ra conf <<< "$i"
        /usr/bin/timeout .3 /usr/bin/jack_control dps "${conf[0]// /}" "${conf[1]}" </dev/null >/dev/null 2>/dev/null || return 1
    done
}

function force_sm {
    /usr/bin/killall jackd

    /usr/bin/timeout 1 /usr/bin/jack_control start
	
    /usr/bin/timeout 1 /usr/bin/jack_control sm </dev/null >/dev/null 2>/dev/null
    
    if ! /usr/bin/timeout .3 /usr/bin/jack_control status </dev/null >/dev/null 2>/dev/null\
           || ! /usr/bin/timeout .3 /usr/bin/jack_samplerate </dev/null >/dev/null 2>/dev/null; then 
        /usr/bin/timeout 1 /usr/bin/jack_control exit
        jack_apply_config
        /usr/bin/timeout 1 /usr/bin/jack_control sm </dev/null >/dev/null 2>/dev/null
        /usr/bin/timeout 1 /usr/bin/jack_control start 
    fi
    if ! /usr/bin/timeout .3 /usr/bin/jack_control status </dev/null >/dev/null 2>/dev/null; then 
        /usr/bin/killall -9 -w jackdbus 
        jack_apply_config
        /usr/bin/timeout 1 /usr/bin/jack_control start </dev/null >/dev/null 2>/dev/null
    fi
}

function jack_config {
    keys=$(cat $jackhome/.config/jack/conf.xml | grep "option name" | grep "\"$1\"" | grep -o -P '(?<=name=")[^"]*')
    values=$(cat $jackhome/.config/jack/conf.xml | grep "option name" | grep "\"$1\"" | grep -o -P '(?<=>)[^<]*')
    echo "$values"
}

function popup {
    /usr/bin/kdialog --passivepopup "$@" -display ":0" 10 --title "$(gettext "Audio Interface")" --icon audio-card || \
    /usr/bin/zenity --notification --display ":0" --text "$1" --title "$(gettext "Audio Interface")" --window-icon audio-card || \
    /usr/bin/echo "$1" &
}

while getopts "h?vfm:n:d:b:k" opt; do
    case "$opt" in
    h|\?)
        show_help
        exit 0
        ;;
    v)  verbose=1
        ;;
    f)  FORCEREPLACE=1
        ;;
    m)  ID_MODEL="$OPTARG"
        ;;
    n)  DEVNAME="$OPTARG"
        ;;
    d)  DEVICE="$OPTARG"
        ;;
    b)  BLACKLIST=";$BLACKLIST;$OPTARG;"
	;;
    k)  keep=1
    esac
done

shift $((OPTIND-1))

[ "$1" = "--" ] && shift


CARD=${DEVNAME//[!0-9]/ }
CARD=$(tr -s [:space:] <<< ${CARD})
CARD=${CARD// /,}

#if card was not set try to get card from ID_MODEL
[[ -z $CARD ]] && [[ ! -z $ID_MODEL ]] && CARD=$(aplay -l | grep "$ID_MODEL" | grep -o -P '[0-9]*' | head -1)

SHORTNAME="${ID_MODEL//_/ }"
NAME="$SHORTNAME ($CARD)"
[[ verbose -gt 0 ]] && ( [[ -z $ID_MODEL ]] && /usr/bin/echo "$(gettext "no card given, using card with highest priority")" || /usr/bin/echo "$(gettext "using card $NAME")" )

[[ verbose -gt 0 ]] && /usr/bin/echo "`eval_gettext \"jack user is \\\${jackuser}\"`"


# if jack is not running yet, replace current config and force jack to start
/usr/bin/timeout .3 /usr/bin/jack_control status </dev/null >/dev/null 2>/dev/null || FORCEREPLACE=1

currentcard="$(jack_config device | grep -o -P '[0-9]' | head -1)"
currentdevice="$(jack_config device | grep -o -P '[0-9]' | tail -n +2 | head -1)"
currentname="$(cat /proc/asound/cards | grep "$currentcard \[" | grep -o -P '[^-]*' | tail -1 | sed -e 's/^[[:space:]]*//g' -e 's/[[:space:]]*\$//g')"

if [[ ! -z $keep ]] && [[ ! -z $currentcard ]]; then
	CARD="$currentcard"
	DEVICE="$currentdevice"
	NAME="$currentname"
fi

#[[ verbose -gt 0 ]] && echo "current card: $currentcard, current device: $currentdevice, current name: $currentname"

[[ verbose -gt 0 ]] && /usr/bin/echo "`eval_gettext \"reading config from \\\$jackhome/\\\${configfile}\"`"

[[ verbose -gt 0 ]] && [[ ! -z $BLACKLIST ]] && /usr/bin/echo "$(gettext "blacklisted devices:")"" ${BLACKLIST//;/$'\n'$'\t'}"

oldprio=$(grep "${currentname},${currentdevice}=" "$jackhome/${configfile}" | grep -o -P '(?<=priority=)[0-9]*' | head -1)
[[ $BLACKLIST =~ (^|;)"${currentname},${currentdevice}"($|;) ]] && oldprio=99

conflines=$(grep "${SHORTNAME},${DEVICE}" "$jackhome/${configfile}")
prio=9999
[[ verbose -gt 0 ]] && /usr/bin/echo "$(gettext "have config for: ")"$'\n'
while read -r line; do
    newprio=$(grep -o -P '(?<=priority=)[0-9]*' <<< "$line")
    device=$(cut -d '=' -f 1 <<< ${line})
    shortname=$(cut -d ',' -f 1 <<< ${device})
    [[ verbose -gt 0 ]] && [[ ! -z ${device} ]] && /usr/bin/echo $'\t'"${device}"
    if [[ ! $BLACKLIST =~ (^|;)"$device"($|;) ]] && [[ $newprio -lt $prio ]] && [[ $(grep "${shortname}" <<< $(/usr/bin/aplay -l)) ]]; then
        #/usr/bin/echo "prio: $newprio"
        confline="$line"
        prio=$newprio
    fi
done <<< "$conflines"

device=$(cut -d '=' -f 1 <<< ${confline})
[[ verbose -gt 0 ]] && /usr/bin/echo $'\n'"`eval_gettext \"using \\\$device\"`"

if [[ -z $CARD ]]; then
    SHORTNAME=$(cut -d ',' -f 1 <<< ${device})
    CARD=$(aplay -l | grep "$SHORTNAME" | grep -o -P '[0-9]*' | head -1)
fi
device=$(cut -d ',' -f 2 <<< ${device})


[[ verbose -gt 0 ]] && /usr/bin/echo "`eval_gettext \"old card's priority was \\\${oldprio}. new card's best priority is \\\${prio}\"`"
[[ ! -z $FORCEREPLACE ]] && FORCEREPLACE=1 && [[ verbose -gt 0 ]] && /usr/bin/echo "$(gettext "replacing forced.")"

[[ -z $oldprio ]] && oldprio=9999 

if [[ -z $FORCEREPLACE ]] && ( [[ ! -z $prio ]] && [[ $prio -gt $oldprio ]] ); then
        [[ verbose -gt 0 ]] && echo "$(gettext "attaching alsa_in and alsa_out...")"

        add_inout

        popup "`eval_gettext \"Attached \\\${SHORTNAME}.\"`" &

else
        [[ verbose -gt 0 ]] && echo "$(gettext "replacing...")"
        
        
        
        [[ -z $device ]] && device=0 && [[ verbose -gt 0 ]] && echo "$(gettext "no device set. trying device 0.")"
        
        confline=$(cut -d '=' -f 2- <<< ${confline})
        confline="${confline};device=hw:$CARD,$device"
        
        [[ verbose -gt 0 ]] && [[ -z $keep ]] && /usr/bin/echo "$(gettext "using config:")"$'\n'$'\n'$'\t'"${confline//;/$'\n'$'\t'}" 

        /usr/bin/timeout 1 /usr/bin/jack_control start </dev/null >/dev/null 2>/dev/null
	        
        if [[ -z $keep ]]; then
            IFS=';' read -ra configs <<< "$confline"		
            for i in "${configs[@]}"; do
                    IFS='=' read -ra conf <<< "$i"
                    oldval=$(jack_config ${conf[0]// /})
                    newval=${conf[1]}
                    if [ "$oldval" != "$newval" ]; then
                        if [[ ! "period,priority" =~ "${conf[0]// /}" ]]; then
                            [[ verbose -gt 0 ]] && echo "${conf[0]// /}: $oldval -> $newval"
                            switchmaster=1
                        else
                            if [[ "period" = "${conf[0]// /}" ]]; then
                                /usr/bin/timeout .5 /usr/bin/jack_bufsize "$newval"
                                popup "`eval_gettext \"Buffer size changed from \\\${oldval} to \\\${newval}.\"`"
                            fi
                        fi
                    fi
                    /usr/bin/timeout .3 /usr/bin/jack_control dps "${conf[0]// /}" "${conf[1]}" </dev/null >/dev/null 2>/dev/null
            done
        fi
        
        cns="$(/usr/bin/timeout .5 /usr/bin/jack_lsp -c)"
        IFS=',' read -ra cons <<< "${cns//$'\n'/,}"
            
	/usr/bin/killall alsa_in
        /usr/bin/killall alsa_out


        #don't switch master if nothing changed
        if [[ -z $switchmaster ]]; then
            #popup "Device parameters did not change" &
            
            #exit if jack is running, force switch master if not.
            /usr/bin/timeout .3 /usr/bin/jack_control status </dev/null >/dev/null 2>/dev/null && /usr/bin/timeout .3 /usr/bin/jack_samplerate </dev/null >/dev/null 2>/dev/null
            
        else
                        
            force_sm

            if ! /usr/bin/timeout .3 /usr/bin/jack_control status </dev/null >/dev/null 2>/dev/null; then 
                /usr/bin/kdialog --passivepopup "$(gettext "Could not start jack.")"$'\n'"$(gettext "Try again with other device parameters.")" -display ":0" 2 --title "$(gettext "Audio Interface")" --icon dialog-warning || \
                /usr/bin/zenity --notification --display ":0" --text "$(gettext "Could not start jack.")"$'\n'"$(gettext "Try again with other device parameters.")" --title "$(gettext "Audio Interface")" --window-icon dialog-warning & 
                die "$(gettext "Could not start jack.")"$'\n'"$(gettext "Try again with other device parameters.")"
            fi
            
            if [[ -z $currentname ]]; then
                popup "`eval_gettext \"Switched master to \\\${SHORTNAME},\\\${device}.\"`" &
            else
                popup "`eval_gettext \"Switched master from \\\${currentname},\\\${currentdevice} to \\\${SHORTNAME},\\\${device}.\"`" &
            fi
        
        fi
        
        add_inout
        
        for ((i=0; i<${#cons[@]}; i++)); do
                firstchar=${cons[$i]:0:1}
                cons[$i]=$(/usr/bin/echo "${cons[$i]}" | sed -e 's/^[[:space:]]*//g' -e 's/[[:space:]]*\$//g')
                whitespace=$(printf '\n\t ')
                case "$firstchar" in
                    *[!$whitespace]*) master="${cons[$i]}"
                        #/usr/bin/echo "master \"$master\"..."
                        ;;
                    *) /usr/bin/jack_connect "${cons[$i]}" "$master">/dev/null 2>&1
                        #/usr/bin/echo "connecting \"${cons[$i]}\" to \"$master\"";;
                esac
        done

fi

