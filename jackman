#!/bin/bash

export TEXTDOMAINDIR=/usr/share/locale
export TEXTDOMAIN=jackman

. gettext.sh

OPTIND=1         # Reset in case getopts has been used previously in the shell.

# Initialize our own variables:
verbose=0

configfile=".config/jackman.conf"

jackuser=$(ps -p `pidof jackdbus | cut -d ' ' -f1` -o user=)
[[ -z $jackuser ]] && [[ ! $USER = "root" ]] && jackuser=$USER
[[ -z $jackuser ]] && jackuser=$(users | cut -d ' ' -f 1)
jackhome=$(eval echo ~$jackuser)

DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/$(id -u $jackuser)/bus"

function die { echo "$@" 1>&2 ; exit 1; }

function show_help {
    echo "`eval_gettext \"this script configures the audio device given by environment variables \\$DEVNAME and \\$SHORTNAME (see udev parameter description) or the device with highest priority as jackdbus master if it has a higher priority than the current master (as specified in \\$HOME/\\\${configfile}), starts jackdbus and adds alsa_in and alsa_out devices for all other audio devices.

parameters:
    -h show this
    -v verbose output
    -m set value for SHORTNAME
    -n set value for DEVNAME
    -f force replace (see FORCEREPLACE in next section)
    -d set value for DEVICE
    -b set value for BLACKLIST, e.g
    -k use previously used card and refresh jackbus, alsa_in, alsa_out
    
environment variables used by this script:
    SHORTNAME: short name of the device as given by \\\`aplay -l\\\`
    DEVNAME: device name as given by udev
    FORCEREPLACE: if not empty the current master will always be replaced, regardless of its priority
    DEVICE: if set to an integer number, the device of the given card with id \\$DEVICE will be used, regardless of its priority
    BLACKLIST: dont use devices with name in semicolon separated list \\$BLACKLIST
    
parameters used for jack_control can be specified in \\$HOME/\\\${configfile}

common issues:
    if ulimit is too low (errors like \\\"cannot lock down memory\\\" appear) place the following line in /etc/pam.d/su:
        session         required        pam_limits.so
\"`"
}


function add_inout {

    jack_lsp | grep -i pulseaudio >/dev/null 2>/dev/null || (pulseaudio -k && popup "$(gettext "restarting pulseaudio")") 
    [[ ! $(pacmd list-sinks | grep -o -P "[0-9]*(?=Hz)") = $(jack_samplerate) ]] && (pulseaudio -k && popup "$(gettext "restarting pulseaudio")") 

    cardlines=$(LANG= aplay -l | grep card | grep device)
    printf '%s\n' "$cardlines" | while IFS= read -r cardline; do
        card=$(grep -o -P '(?<=card )[0-9]*' <<< "$cardline")
        device=$(grep -o -P '(?<=device )[0-9]*' <<< "$cardline")
        name=$(grep -o -P '(?<=\[)[^\[\]]*(?=\])' <<< "$cardline" | head -1)
        card=${card// /}
        device=${device// /}
        name="${name},${device}"
        [[ -z $card ]] && continue
        [[ $BLACKLIST =~ (^|;)"$name"($|;) ]] && continue
        #[[ verbose -gt 0 ]] && echo "$cardline"
        [[ verbose -gt 0 ]] && echo "`eval_gettext \"Attaching hw:\\\${card},\\\${device}.\"`"
        exec alsa_out -d "hw:${card},${device}" -j "${name} - out" </dev/null >/dev/null 2>/dev/null &
        disown
	exec alsa_in -d "hw:${card},${device}" -j "${name} - in" </dev/null >/dev/null 2>/dev/null &
    	disown
    done    
}

function jack_apply_config {
    [[ ! -z $keep ]] && return
    IFS=';' read -ra configs <<< "$confline"		
    for i in "${configs[@]}"; do
        IFS='=' read -ra conf <<< "$i"
        timeout .3 jack_control dps "${conf[0]// /}" "${conf[1]}" </dev/null >/dev/null 2>/dev/null || return 1
        [[ ${conf[0]// /} = "inchannels" ]] && [[ ${conf[1]} = "0" ]] && timeout .3 jack_control dpr "${conf[0]// /}" &
        [[ ${conf[0]// /} = "outchannels" ]] && [[ ${conf[1]} = "0" ]] && timeout .3 jack_control dpr "${conf[0]// /}" &
    done
}

function force_sm {
    
    killall jackd

    timeout 1 jack_control start

    timeout 1 jack_control sm </dev/null >/dev/null 2>/dev/null
    
    if ! timeout .3 jack_control status </dev/null >/dev/null 2>/dev/null\
           || ! timeout .3 jack_samplerate </dev/null >/dev/null 2>/dev/null; then 
        killall -9 -w alsa_in
        killall -9 -w alsa_out
        timeout 1 jack_control exit
        jack_apply_config
        timeout 1 jack_control sm </dev/null >/dev/null 2>/dev/null
        timeout 1 jack_control start 
    fi
    if ! timeout .3 jack_control status </dev/null >/dev/null 2>/dev/null; then
        killall -9 -w jackdbus  
        timeout .3 jack_control eps driver alsa
        jack_apply_config
        timeout 1 jack_control start </dev/null >/dev/null 2>/dev/null
    fi
}

function jack_config {
    line=$(grep -n "name=\"alsa\"" < $jackhome/.config/jack/conf.xml | grep -o -P '[0-9]+')
    keys=$(tail -n +$line $jackhome/.config/jack/conf.xml | grep "option name" | grep "\"$1\"" | grep -o -P '(?<=name=")[^"]*')
    values=$(tail -n +$line $jackhome/.config/jack/conf.xml | grep "option name" | grep "\"$1\"" | grep -o -P '(?<=>)[^<]*')
    echo "$values"
}

function popup {
    kdialog --passivepopup "$@" -display ":0" 10 --title "$(gettext "Audio Interface")" --icon audio-card || \
    zenity --notification --display ":0" --text "$1" --title "$(gettext "Audio Interface")" --window-icon audio-card || \
    echo "$1" &
}

while getopts "h?vfm:n:d:b:k" opt; do
    case "$opt" in
    h|\?)
        show_help
        exit 0
        ;;
    v)  verbose=1
        ;;
    f)  FORCEREPLACE=1
        ;;
    m)  SHORTNAME="$OPTARG"
        ;;
    n)  DEVNAME="$OPTARG"
        ;;
    d)  DEVICE="$OPTARG"
        ;;
    b)  BLACKLIST=";$BLACKLIST;$OPTARG;"
	;;
    k)  keep=1
    esac
done

shift $((OPTIND-1))

[ "$1" = "--" ] && shift


BLACKLIST=${BLACKLIST//;;/;}


CARD=${DEVNAME//[!0-9]/ }
CARD=$(tr -s [:space:] <<< ${CARD})
CARD=${CARD// /,}

[[ ! -z $CARD ]] && [[ -z $SHORTNAME ]] && SHORTNAME="$(grep -P "^[^:]*${CARD}:" <<< "$(aplay -l)" | grep -o -P '(?<=\[)[^\[\]]*(?=\])' | head -1)"

#if card was not set try to get card from SHORTNAME
[[ -z $CARD ]] && [[ ! -z $SHORTNAME ]] && CARD=$(aplay -l | grep "$SHORTNAME" | grep -o -P '[0-9]*' | head -1)

SHORTNAME="${SHORTNAME//_/ }"
NAME="$SHORTNAME ($CARD)"

[[ verbose -gt 0 ]] && ( [[ -z $SHORTNAME ]] && echo "$(gettext "no card given, using card with highest priority")" || echo "$(gettext "using card $NAME")" )

[[ verbose -gt 0 ]] && echo "`eval_gettext \"jack user is \\\${jackuser}\"`"


# if jack is not running yet, replace current config and force jack to start
timeout .3 jack_control status </dev/null >/dev/null 2>/dev/null || FORCEREPLACE=1

# get old jack device from jack config
currentcard="$(jack_config device | grep -o -P '[0-9]' | head -1)"
currentdevice="$(jack_config device | grep -o -P '[0-9]' | tail -n +2 | head -1)"
currentname="$(grep "$currentcard \[" /proc/asound/cards | grep -o -P '[^-]*' | tail -1 | sed -e 's/^[[:space:]]*//g' -e 's/[[:space:]]*\$//g')"

# if we can not find a new card or -k was set, keep old card and refresh
if [[ ! -z $keep ]] && [[ ! -z $currentcard ]]; then
    CARD="$currentcard"
    DEVICE="$currentdevice"
    NAME="$currentname"
fi

#[[ verbose -gt 0 ]] && echo "current card: $currentcard, current device: $currentdevice, current name: $currentname"

[[ verbose -gt 0 ]] && echo "`eval_gettext \"reading config from \\\$jackhome/\\\${configfile}\"`"

[[ verbose -gt 0 ]] && [[ ! -z $BLACKLIST ]] && echo "$(gettext "blacklisted devices:")"" ${BLACKLIST//;/$'\n'$'\t'}"

# find the device with highest priority
oldprio=$(grep "${currentname},${currentdevice}=" "$jackhome/${configfile}" | grep -o -P '(?<=priority=)[0-9]*' | head -1)
[[ $BLACKLIST =~ (^|;)"${currentname},${currentdevice}"($|;) ]] && oldprio=99

conflines=$(grep "${SHORTNAME},${DEVICE}" "$jackhome/${configfile}")
prio=9999
[[ verbose -gt 0 ]] && echo "$(gettext "looking for: ")"${SHORTNAME},${DEVICE}
[[ verbose -gt 0 ]] && echo "$(gettext "have config for: ")"$'\n'
while read -r line; do
    newprio=$(grep -o -P '(?<=priority=)[0-9]*' <<< "$line")
    device=$(cut -d '=' -f 1 <<< ${line})
    shortname=$(cut -d ',' -f 1 <<< ${device})
    [[ verbose -gt 0 ]] && [[ ! -z ${device} ]] && echo $'\t'"${device}"
    if [[ ! $BLACKLIST =~ (^|;)"$device"($|;) ]] && [[ $newprio -lt $prio ]] && [[ $(grep "${shortname}" <<< $(aplay -l)) ]]; then
        #echo "prio: $newprio"
        confline="$line"
        prio=$newprio
    fi
done <<< "$conflines"

device=$(cut -d '=' -f 1 <<< ${confline})
[[ verbose -gt 0 ]] && echo $'\n'"`eval_gettext \"using \\\$device\"`"

if [[ -z $CARD ]]; then
    SHORTNAME=$(cut -d ',' -f 1 <<< ${device})
    CARD=$(aplay -l | grep "$SHORTNAME" | grep -o -P '[0-9]*' | head -1)
fi
device=$(cut -d ',' -f 2 <<< ${device})

[[ -z $device ]] && [[ ! -z $BLACKLIST ]] && exit 0 #exit 0 to prevent systemd daemon from restarting

[[ verbose -gt 0 ]] && echo "`eval_gettext \"old card's priority was \\\${oldprio}. new card's best priority is \\\${prio}\"`"

[[ ! -z $FORCEREPLACE ]] && FORCEREPLACE=1 && [[ verbose -gt 0 ]] && echo "$(gettext "replacing forced.")"

[[ -z $oldprio ]] && oldprio=9999 

if [[ -z $FORCEREPLACE ]] && ( [[ ! -z $prio ]] && [[ $prio -gt $oldprio ]] ); then

        inout=$(grep -o -P '(?<=attach_others=).*' < ${jackhome}/.config/jackman.conf)
        
        if [[ $inout = "false" ]] || [[ $inout = "0" ]]; then
            [[ verbose -gt 0 ]] && echo "$(gettext "not attaching alsa_in and alsa_out as it's disabled in config file")"
        else
            [[ verbose -gt 0 ]] && echo "$(gettext "attaching alsa_in and alsa_out...")"
            add_inout            
            popup "`eval_gettext \"Attached \\\${SHORTNAME}.\"`" &
        fi
        
else
        [[ verbose -gt 0 ]] && echo "$(gettext "replacing...")"
        
        
        
        [[ -z $device ]] && device=0 && [[ verbose -gt 0 ]] && echo "$(gettext "no device set. trying device 0.")"
        
        confline=$(cut -d '=' -f 2- <<< ${confline})
        confline="${confline};device=hw:$CARD,$device"
        
        [[ verbose -gt 0 ]] && [[ -z $keep ]] && echo "$(gettext "using config:")"$'\n'$'\n'$'\t'"${confline//;/$'\n'$'\t'}" 

        timeout 1 jack_control start </dev/null >/dev/null 2>/dev/null
	        
        if [[ -z $keep ]]; then
            IFS=';' read -ra configs <<< "$confline"		
            for i in "${configs[@]}"; do
                    IFS='=' read -ra conf <<< "$i"
                    oldval=$(jack_config ${conf[0]// /} | head -1)
                    newval=${conf[1]}
                    if [ "$oldval" != "$newval" ]; then
                        if [[ ! "period,priority" =~ "${conf[0]// /}" ]]; then
                            [[ verbose -gt 0 ]] && echo "${conf[0]// /}: $oldval -> $newval"
                            switchmaster=1
                        else
                            if [[ "period" = "${conf[0]// /}" ]]; then
                                timeout .5 jack_bufsize "$newval"
                                popup "`eval_gettext \"Buffer size changed from \\\${oldval} to \\\${newval}.\"`"
                            fi
                        fi
                    fi
                    timeout .3 jack_control dps "${conf[0]// /}" "${conf[1]}" </dev/null >/dev/null 2>/dev/null || break
            done
        fi
        
        # get current jack connections, restore them later
        cns="$(timeout .5 jack_lsp -c)"
        IFS=';' read -ra cons <<< "${cns//$'\n'/;}"
            
        
        # killall alsa_in/alsa_out as they might be consuming 100% CPU after waking up from suspend. TODO: handle them in a smarter way...
        killall alsa_in
        killall alsa_out


        #don't switch master if nothing changed
        if [[ -z $switchmaster ]]; then
            #popup "Device parameters did not change" &
            
            #exit if jack is running, force switch master if not.
            (timeout .3 jack_control status </dev/null >/dev/null 2>/dev/null && timeout .3 jack_samplerate </dev/null >/dev/null 2>/dev/null) || switchmaster=1
            
        fi    
        if [[ ! -z $switchmaster ]]; then
                        
            # switch master or force replace
            force_sm

            # try next device if jack could not be started
            if ! timeout .3 jack_control status </dev/null >/dev/null 2>/dev/null; then 
                kdialog --passivepopup "$(gettext "Could not start jack.")"$'\n'"$(gettext "Trying next device...")" -display ":0" 2 --title "$(gettext "Audio Interface")" --icon dialog-warning || \
                zenity --notification --display ":0" --text "$(gettext "Could not start jack.")"$'\n'"$(gettext "Trying next device...")" --title "$(gettext "Audio Interface")" --window-icon dialog-warning & 
                echo "$(gettext "Could not start jack.")"$'\n'"$(gettext "Trying next device...")"
                
                # run this script with current device blacklisted
                $0 -vb "${BLACKLIST};${SHORTNAME},${device}"
                
                exit 1
            fi
            
            if [[ -z $currentname ]]; then
                popup "`eval_gettext \"Switched master to \\\${SHORTNAME},\\\${device}.\"`" &
            else
                popup "`eval_gettext \"Switched master from \\\${currentname},\\\${currentdevice} to \\\${SHORTNAME},\\\${device}.\"`" &
            fi
        
        fi
        
        inout=$(grep -o -P '(?<=attach_others=).*' < ${jackhome}/.config/jackman.conf)
        
        if [[ $inout = "false" ]] || [[ $inout = "0" ]]; then
            [[ verbose -gt 0 ]] && echo "$(gettext "not attaching alsa_in and alsa_out as it's disabled in config file")"
        else
            [[ verbose -gt 0 ]] && echo "$(gettext "attaching alsa_in and alsa_out...")"
            add_inout            
        fi
        

        # restore previously saved jack connections
        for ((i=0; i<${#cons[@]}; i++)); do
                firstchar=${cons[$i]:0:1}
                cons[$i]=$(echo "${cons[$i]}" | sed -e 's/^[[:space:]]*//g' -e 's/[[:space:]]*\$//g')
                whitespace=$(printf '\n\t ')
                case "$firstchar" in
                    *[!$whitespace]*) master="${cons[$i]}"
                        #echo "master \"$master\"..."
                        ;;
                    *)  jack_connect "${cons[$i]}" "$master" >/dev/null 2>&1
                        #[[ verbose -gt 0 ]] && echo "connecting \"${cons[$i]}\" to \"$master\"";;
                esac
        done

fi

exit 0
